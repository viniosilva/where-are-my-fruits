// Code generated by MockGen. DO NOT EDIT.
// Source: ./bucket.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockBucketLogger is a mock of BucketLogger interface.
type MockBucketLogger struct {
	ctrl     *gomock.Controller
	recorder *MockBucketLoggerMockRecorder
}

// MockBucketLoggerMockRecorder is the mock recorder for MockBucketLogger.
type MockBucketLoggerMockRecorder struct {
	mock *MockBucketLogger
}

// NewMockBucketLogger creates a new mock instance.
func NewMockBucketLogger(ctrl *gomock.Controller) *MockBucketLogger {
	mock := &MockBucketLogger{ctrl: ctrl}
	mock.recorder = &MockBucketLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketLogger) EXPECT() *MockBucketLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockBucketLogger) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockBucketLoggerMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockBucketLogger)(nil).Error), args...)
}

// MockBucketRepository is a mock of BucketRepository interface.
type MockBucketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBucketRepositoryMockRecorder
}

// MockBucketRepositoryMockRecorder is the mock recorder for MockBucketRepository.
type MockBucketRepositoryMockRecorder struct {
	mock *MockBucketRepository
}

// NewMockBucketRepository creates a new mock instance.
func NewMockBucketRepository(ctrl *gomock.Controller) *MockBucketRepository {
	mock := &MockBucketRepository{ctrl: ctrl}
	mock.recorder = &MockBucketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketRepository) EXPECT() *MockBucketRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBucketRepository) Create(value interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBucketRepositoryMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBucketRepository)(nil).Create), value)
}
