// Code generated by MockGen. DO NOT EDIT.
// Source: ./factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFactoryDB is a mock of FactoryDB interface.
type MockFactoryDB struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryDBMockRecorder
}

// MockFactoryDBMockRecorder is the mock recorder for MockFactoryDB.
type MockFactoryDBMockRecorder struct {
	mock *MockFactoryDB
}

// NewMockFactoryDB creates a new mock instance.
func NewMockFactoryDB(ctrl *gomock.Controller) *MockFactoryDB {
	mock := &MockFactoryDB{ctrl: ctrl}
	mock.recorder = &MockFactoryDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactoryDB) EXPECT() *MockFactoryDBMockRecorder {
	return m.recorder
}

// DB mocks base method.
func (m *MockFactoryDB) DB() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DB indicates an expected call of DB.
func (mr *MockFactoryDBMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockFactoryDB)(nil).DB))
}
