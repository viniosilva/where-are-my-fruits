// Code generated by MockGen. DO NOT EDIT.
// Source: ./health.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHealthLogger is a mock of HealthLogger interface.
type MockHealthLogger struct {
	ctrl     *gomock.Controller
	recorder *MockHealthLoggerMockRecorder
}

// MockHealthLoggerMockRecorder is the mock recorder for MockHealthLogger.
type MockHealthLoggerMockRecorder struct {
	mock *MockHealthLogger
}

// NewMockHealthLogger creates a new mock instance.
func NewMockHealthLogger(ctrl *gomock.Controller) *MockHealthLogger {
	mock := &MockHealthLogger{ctrl: ctrl}
	mock.recorder = &MockHealthLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthLogger) EXPECT() *MockHealthLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockHealthLogger) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockHealthLoggerMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockHealthLogger)(nil).Error), args...)
}

// MockHealthRepository is a mock of HealthRepository interface.
type MockHealthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHealthRepositoryMockRecorder
}

// MockHealthRepositoryMockRecorder is the mock recorder for MockHealthRepository.
type MockHealthRepositoryMockRecorder struct {
	mock *MockHealthRepository
}

// NewMockHealthRepository creates a new mock instance.
func NewMockHealthRepository(ctrl *gomock.Controller) *MockHealthRepository {
	mock := &MockHealthRepository{ctrl: ctrl}
	mock.recorder = &MockHealthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthRepository) EXPECT() *MockHealthRepositoryMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockHealthRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockHealthRepositoryMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHealthRepository)(nil).Ping), ctx)
}
